$group
    $params &opt
    $
        //
    head
        $if opt.title
            @title ${opt.title}
        meta
            charset utf-8
        meta
            name viewport
            content width=device-width, initial-scale=1
        link
            rel preconnect
            href https://fonts.googleapis.com
        link
            rel preconnect
            href https://fonts.gstatic.com
            crossorigin
        link
            @ rel "stylesheet"
            @ href "https://cdn.jsdelivr.net/npm/normalize.css@8.0.1/normalize.min.css"
        script
            module
                set window.__filename = 'browser'
                $if opt.useWizziBrowser
                    var WizziBrowser
                        {
                            @ log
                                function
                                    var line
                                        _ Array.prototype.slice.call(arguments).map
                                            function
                                                param argument
                                                return
                                                    iif typeof argument === 'string'
                                                        then argument
                                                        else JSON.stringify(argument)
                                            ._ join
                                                @ '\n '
                                    if arguments.length > 1 && arguments[arguments.length-1] === '-'
                                        set line += new Array(50).join('-')
                                    set document.querySelector('#wizzi-browser-log').textContent += line + '\n'
                            @ clearLog
                                function
                                    set document.querySelector('#wizzi-browser-log').textContent = ''
                            @ setStatus
                                function
                                    param status
                                    set document.querySelector('#wizzi-browser-status').textContent = status
                            @ setContent
                                function
                                    param newContent
                                    var content = document.querySelector('#wizzi-browser-content')
                                    while content.hasChildNodes()
                                        _ content.removeChild(content.lastChild)
                                    _ content.appendChild(newContent)
        $hook head-styles-0
        $if opt.useWizziBrowser
            @style
                css
                    # wizzi-browser-status
                        margin .5em 0
                        font-style italic
                    # wizzi-browser-log
                        margin .5em 0
                        white-space pre-wrap
                    # wizzi-browser-content
                        margin .5em 0
                    # status:empty, #log:empty, #content:empty
                        display none
        ./site-styles( &opt )
        $if opt.stickyNav
            style
                # ${opt.stickyNav}.sticky
                    position fixed
                    top 0
                . ${opt.stickyNav}OffsetMargin
                    padding-top ${opt.stickyNavOffset}px
                $if opt.stickyNavLogo
                    # ${opt.stickyNavLogo}.visible
                        display block
                    # ${opt.stickyNavLogo}.hidden
                        display none
        $hook head-styles
        $hook head-styles-1
        $hook head-scripts
    body
        $hook body-scripts-0
        $if opt.useWizziBrowser
            div
                # wizzi-browser-status
                # wizzi-browser-log
                # wizzi-browser-content
        ./site-scripts( &opt )
        $if opt.stickyNav
            script
                let header = document.getElementById("__main_navbar")
                let stickyBar = document.getElementById("${opt.stickyNav}")
                $if opt.stickyNavLogo
                    let stickyLogo = document.getElementById("${opt.stickyNavLogo}")
                let stickyPos = ${opt.stickyNavOffset}
                _ window.addEventListener
                    @ "scroll"
                    =>
                        param e
                        let scrollPos = window.scrollY
                        log 'pre sticki', stickyPos, scrollPos, scrollPos > stickyPos
                        if scrollPos > stickyPos
                            _ stickyBar.classList.add('sticky')
                            _ header.classList.add('${opt.stickyNav}OffsetMargin')
                            $if opt.stickyNavLogo
                                _ stickyLogo.classList.add('visible')
                                _ stickyLogo.classList.remove('hidden')
                            log 'sticki', scrollPos
                        else
                            _ stickyBar.classList.remove('sticky')
                            _ header.classList.remove('${opt.stickyNav}OffsetMargin')
                            $if opt.stickyNavLogo
                                _ stickyLogo.classList.remove('visible')
                                _ stickyLogo.classList.add('hidden')
        $hook body-scripts
        $hook body-scripts-1
        $if opt.useHighlight
            script
                _ document.addEventListener
                    @ 'DOMContentLoaded'
                    =>
                        param event
                        _ document.querySelectorAll
                            @ 'pre .hljs'
                            ._ forEach
                                =>
                                    param block
                                    _ hljs.highlightBlock(block)
