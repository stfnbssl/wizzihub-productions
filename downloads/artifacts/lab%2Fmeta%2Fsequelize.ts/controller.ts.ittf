module
    $params modelName|Blog, dbName|project
    
    $ 
        var tb;
        for (var i=0; i<db.tables.length; i++) {
            if (db.tables[i].Name == modelName) {
                tb = db.tables[i];
                tb.__db = db;
            }
        }
        var ctrl = {
            name: 'ApiV1' + tb.Name,
            path: '/api/v1/' + dbName + '/' + tb.name,
            apiSecured: true,
            tb: tb,
        }
    
    v08/ts/controller(&ctrl)
            
        $append imports
          import
              @ ValidateResult
              @ CRUDResult
              from '../../../common/types'
          import
              @ Get${tb.Name}Model
              from '../models/${tb.name}'
          +
          const myname = 'features/${dbName}/controllers/apiv1${tb.name}'

        v08/ts/route_api_secured( get, /, this.getAll)
        v08/ts/route_api_secured( get, /:id, this.getById)
        v08/ts/route_api_secured( post, /, this.create)
        v08/ts/route_api_secured( put, /:id, this.update)
        v08/ts/route_api_secured( delete, /:id, this.delete)

        $append handlers

          v08/ts/handler( getAll )
              _ Get${tb.Name}Model().findAll
                  ._ then
                      =>
                          param result
                              :any
                          log '${tb.Name}.findAll.result', result
                          _ sendSuccess
                              @ response
                              @ result
                  v08/ts/catch_fail(${tb.Name}.getAll)

          v08/ts/handler( getById )
              const id = req.params.id
              _ Get${tb.Name}Model().findByPk(id)
                  ._ then
                      =>
                          param result
                              :any
                          log '${tb.Name}.getById.result', result
                          if result
                            _ sendSuccess
                                @ response
                                @ result
                          else
                            _ sendSuccess
                                @ response
                                {
                                  @ oper 'get'
                                  @ ok false
                                  @ message '${tb.Name} not found'
                  v08/ts/catch_fail(${tb.Name}.getById)

          v08/ts/handler( create )
              if req.body.id
                  _ res.status(400).send
                      `lit 
                          + Bad request: ID should not be provided, since it is determined automatically by the database.
              _ Get${tb.Name}Model().create(req.body)
                  ._ then
                      =>
                          param result
                              :any
                          log '${tb.Name}.create.result', result
                          if result
                            _ sendSuccess
                                @ response
                                @ result
                          else
                            _ sendSuccess
                                @ response
                                {
                                  @ oper 'create'
                                  @ ok false
                                  @ message '${tb.Name} creation failed'
                  v08/ts/catch_fail(${tb.Name}.create)

          v08/ts/handler( update )
              const id = req.params.id
              _ Get${tb.Name}Model().update
                  @ req.body
                  { 
                      { where
                          @ id
                  ._ then
                      =>
                          param result
                              :any
                          log '${tb.Name}.update.result', result
                          if result
                            _ sendSuccess
                                @ response
                                @ result
                          else
                            _ sendSuccess
                                @ response
                                {
                                  @ oper 'update'
                                  @ ok false
                                  @ message '${tb.Name} update failed'
                  v08/ts/catch_fail(${tb.Name}.update)

          v08/ts/handler( delete )
              const id = req.params.id
              _ Get${tb.Name}Model().delete
                  { 
                      { where
                          @ id
                  ._ then
                      =>
                          param result
                              :any
                          log 'delete.result', result
                          if result
                            _ sendSuccess
                                @ response
                                @ result
                          else
                            _ sendSuccess
                                @ response
                                {
                                  @ oper 'delete'
                                  @ ok false
                                  @ message '${tb.Name} delete failed'
                  v08/ts/catch_fail(${tb.Name}.delete)
