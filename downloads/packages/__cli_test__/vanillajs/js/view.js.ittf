module
    kind react
    (
        iife 
            param window
            function View
                param template
                set this.template = template
                set this.ENTER_KEY = 13
                set this.ESCAPE_KEY = 27
                set this.$todoList = qs('.todo-list')
                set this.$todoItemCounter = qs('.todo-count')
                set this.$clearCompleted = qs('.clear-completed')
                set this.$main = qs('.main')
                set this.$footer = qs('.footer')
                set this.$toggleAll = qs('.toggle-all')
                set this.$newTodo = qs('.new-todo')
                #
                    # *
                    # * View that abstracts away the browser's DOM completely.
                    # * It has two simple entry points:
                    # *
                    # *   - bind(eventName, handler)
                    # *     Takes a todo application event and registers the handler
                    # *   - render(command, parameterObject)
                    # *     Renders the given command with the options
                    # 
            set View.prototype._removeItem =
                function 
                    param id
                    var elem = qs('[data-id="' + id + '"]')
                    if elem
                        _ this.$todoList.removeChild(elem)
            set View.prototype._clearCompletedButton =
                function 
                    param completedCount
                    param visible
                    set this.$clearCompleted.innerHTML = this.template.clearCompletedButton(completedCount)
                    set this.$clearCompleted.style.display =
                        iif visible
                            then 'block'
                            else 'none'
            set View.prototype._setFilter =
                function 
                    param currentPage
                    set qs('.filters .selected').className = ''
                    set qs('.filters [href="#/' + currentPage + '"]').className = 'selected'
            set View.prototype._elementComplete =
                function 
                    param id
                    param completed
                    var listItem = qs('[data-id="' + id + '"]')
                    if !listItem
                        return 
                    set listItem.className =
                        iif completed
                            then 'completed'
                            else ''
                        # In case it was toggled from an event and not by clicking the checkbox
                    set qs('input', listItem).checked = completed
                        # In case it was toggled from an event and not by clicking the checkbox
            set View.prototype._editItem =
                function 
                    param id
                    param title
                    var listItem = qs('[data-id="' + id + '"]')
                    if !listItem
                        return 
                    set listItem.className = listItem.className + ' editing'
                    var input = document.createElement('input')
                    set input.className = 'edit'
                    _ listItem.appendChild(input)
                    _ input.focus()
                    set input.value = title
            set View.prototype._editItemDone =
                function 
                    param id
                    param title
                    var listItem = qs('[data-id="' + id + '"]')
                    if !listItem
                        return 
                    var input = qs('input.edit', listItem)
                    _ listItem.removeChild(input)
                    set listItem.className = listItem.className.replace('editing', '')
                    _ qsa('label', listItem).forEach
                        function 
                            param label
                            set label.textContent = title
            set View.prototype.render =
                function 
                    param viewCmd
                    param parameter
                    var self = this
                    var viewCommands
                        { 
                            @ showEntries
                                function 
                                    set self.$todoList.innerHTML = self.template.show(parameter)
                            @ removeItem
                                function 
                                    _ self._removeItem(parameter)
                            @ updateElementCount
                                function 
                                    set self.$todoItemCounter.innerHTML = self.template.itemCounter(parameter)
                            @ clearCompletedButton
                                function 
                                    _ self._clearCompletedButton(parameter.completed, parameter.visible)
                            @ contentBlockVisibility
                                function 
                                    set self.$footer.style.display =
                                        iif parameter.visible
                                            then 'block'
                                            else 'none'
                            @ toggleAll
                                function 
                                    set self.$toggleAll.checked = parameter.checked
                            @ setFilter
                                function 
                                    _ self._setFilter(parameter)
                            @ clearNewTodo
                                function 
                                    set self.$newTodo.value = ''
                            @ elementComplete
                                function 
                                    _ self._elementComplete(parameter.id, parameter.completed)
                            @ editItem
                                function 
                                    _ self._editItem(parameter.id, parameter.title)
                            @ editItemDone
                                function 
                                    _ self._editItemDone(parameter.id, parameter.title)
                    _ viewCommands[viewCmd]()
            set View.prototype._itemId =
                function 
                    param element
                    var li = $parent(element, 'li')
                    return parseInt(li.dataset.id, 10)
            set View.prototype._bindItemEditDone =
                function 
                    param handler
                    var self = this
                    _ $delegate
                        @expr self.$todoList
                        @ 'li .edit'
                        @ 'blur'
                        function 
                            if !this.dataset.iscanceled
                                _ handler
                                    { 
                                        @ id self._itemId(this)
                                        @ title this.value
                    _ $delegate
                        @expr self.$todoList
                        @ 'li .edit'
                        @ 'keypress'
                        function 
                            param event
                            if event.keyCode === self.ENTER_KEY
                                _ this.blur()
            set View.prototype._bindItemEditCancel =
                function 
                    param handler
                    var self = this
                    _ $delegate
                        @expr self.$todoList
                        @ 'li .edit'
                        @ 'keyup'
                        function 
                            param event
                            if event.keyCode === self.ESCAPE_KEY
                                set this.dataset.iscanceled = true
                                _ this.blur()
                                _ handler
                                    { 
                                        @ id self._itemId(this)
            set View.prototype.bind =
                function 
                    param event
                    param handler
                    var self = this
                    if event === 'newTodo'
                        _ $on
                            @expr self.$newTodo
                            @ 'change'
                            function 
                                _ handler(self.$newTodo.value)
                    else
                        if event === 'removeCompleted'
                            _ $on
                                @expr self.$clearCompleted
                                @ 'click'
                                function 
                                    _ handler()
                        else
                            if event === 'toggleAll'
                                _ $on
                                    @expr self.$toggleAll
                                    @ 'click'
                                    function 
                                        _ handler
                                            { 
                                                @ completed this.checked
                            else
                                if event === 'itemEdit'
                                    _ $delegate
                                        @expr self.$todoList
                                        @ 'li label'
                                        @ 'dblclick'
                                        function 
                                            _ handler
                                                { 
                                                    @ id self._itemId(this)
                                else
                                    if event === 'itemRemove'
                                        _ $delegate
                                            @expr self.$todoList
                                            @ '.destroy'
                                            @ 'click'
                                            function 
                                                _ handler
                                                    { 
                                                        @ id self._itemId(this)
                                    else
                                        if event === 'itemToggle'
                                            _ $delegate
                                                @expr self.$todoList
                                                @ '.toggle'
                                                @ 'click'
                                                function 
                                                    _ handler
                                                        { 
                                                            @ id self._itemId(this)
                                                            @ completed this.checked
                                        else
                                            if event === 'itemEditDone'
                                                _ self._bindItemEditDone(handler)
                                            else
                                                if event === 'itemEditCancel'
                                                    _ self._bindItemEditCancel(handler)
                # Export to window
            set window.app =
                || 
                    + window.app
                    { 
                # Export to window
            set window.app.View = View
            (
                @ window
        #
            # global qs, qsa, $on, $parent, $delegate
